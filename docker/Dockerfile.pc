# ==========================================================
# BASE IMAGE
# ==========================================================
FROM ubuntu:20.04

ENV DEBIAN_FRONTEND=noninteractive \
    LANG=en_SG.UTF-8 \
    LC_ALL=en_SG.UTF-8

# ----------------------------------------------------------
# Locale
# ----------------------------------------------------------
RUN apt-get update && apt-get install -y locales && \
    locale-gen en_SG.UTF-8 && update-locale LC_ALL=en_SG.UTF-8 LANG=en_SG.UTF-8

# ==========================================================
# CORE SYSTEM + COMPILATION TOOLS
# ==========================================================
RUN apt-get update && apt-get install -y \
    curl gnupg2 lsb-release git cmake build-essential pkg-config \
    libomp-dev \
    python3-pip python3-argcomplete \
    python3-numpy python3-scipy python3-matplotlib \
    software-properties-common && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# ==========================================================
# ROS2 FOXY INSTALLATION
# ==========================================================
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key \
      -o /usr/share/keyrings/ros-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] \
          http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" \
      | tee /etc/apt/sources.list.d/ros2.list > /dev/null

RUN apt-get update && apt-get install -y \
    ros-foxy-desktop \
    python3-colcon-common-extensions \
    ros-foxy-gazebo-ros-pkgs \
    ros-foxy-joint-state-publisher \
    ros-foxy-vision-msgs && \
    rm -rf /var/lib/apt/lists/*

# ==========================================================
# OPENCV + UTILITY PACKAGES
# ==========================================================
RUN apt-get update && apt-get install -y \
    python3-opencv libopencv-dev libgl1 libglib2.0-0 \
    psmisc bluez bluez-tools python3-evdev python3-pyudev && \
    rm -rf /var/lib/apt/lists/*

# ==========================================================
# ACADOS (HEAVY BUILD) â€” BUILT ONCE
# ==========================================================
WORKDIR /opt
RUN git clone --recursive https://github.com/acados/acados.git && \
    cd acados && mkdir build && cd build && \
    cmake -DACADOS_WITH_QPOASES=ON \
          -DACADOS_WITH_HPMPC=OFF \
          -DACADOS_WITH_OSQP=ON \
          -DACADOS_WITH_OPENMP=ON .. && \
    make install -j$(nproc)

# Python interface
RUN pip3 install -e /opt/acados/interfaces/acados_template

ENV ACADOS_SOURCE_DIR=/opt/acados
ENV PATH=/opt/acados/bin:$PATH
ENV LD_LIBRARY_PATH=/opt/acados/lib:/usr/local/lib:$LD_LIBRARY_PATH

# ==========================================================
# RUST + tera_renderer (for acados)
# ==========================================================
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && \
    /root/.cargo/bin/cargo install --git https://github.com/acados/tera_renderer.git --root /opt/acados

# ==========================================================
# ROS2 WORKSPACE
# ==========================================================
WORKDIR /ros2_ws
RUN echo "source /opt/ros/foxy/setup.bash" >> ~/.bashrc && \
    echo "export ACADOS_SOURCE_DIR=/opt/acados" >> ~/.bashrc && \
    echo "export LD_LIBRARY_PATH=/opt/acados/lib:/usr/local/lib:\$LD_LIBRARY_PATH" >> ~/.bashrc && \
    echo 'alias b="colcon build && source install/setup.bash"' >> ~/.bashrc && \
    echo 'alias s="source install/setup.bash"' >> ~/.bashrc

# ==========================================================
# PYTHON REQUIREMENTS (LIGHTWEIGHT, EASY TO UPDATE)
# ==========================================================
# --- Base project requirements ---
COPY docker/requirements.txt /tmp/requirements.txt
RUN pip install --upgrade pip && \
    pip install --no-cache-dir -r /tmp/requirements.txt

# --- Optional / research requirements ---
# You can append new .txt files here without triggering acados rebuild.
# Example:
# COPY docker/requirements_extra.txt /tmp/requirements_extra.txt
# RUN pip install --no-cache-dir -r /tmp/requirements_extra.txt

# --- Direct install for fast iteration ---
RUN pip install --no-cache-dir filterpy networkx pyclothoids casadi

# Handy aliases
RUN echo 'alias sim="clear && source /ros2_ws/install/setup.bash && ros2 launch simulator gazebo.launch.py"' >> ~/.bashrc && \
    echo 'alias mpc="clear && source /ros2_ws/install/setup.bash && ros2 launch simulator mpc.launch.py"' >> ~/.bashrc

CMD ["bash"]
